// PasswordHash_Round(roundNumber; index; digestAlgorithm; inputHex; convertedSaltHex; convertedPasswordHex)
// Perform PasswordHash stretching process
//
// Result: [Object] CryptDigest
Let([
  ~cHex = If(Mod(index; 2); convertedPasswordHex; inputHex);
  ~cHex = If(not Mod(index; 3) = 0; ~cHex & convertedSaltHex; ~cHex);
  ~cHex = If(not Mod(index; 7) = 0; ~cHex & convertedPasswordHex; ~cHex);
  ~cHex = If(Mod(index; 2); ~cHex & inputHex; ~cHex & convertedPasswordHex);
  ~result = CryptDigest(HexDecode(~cHex; True); digestAlgorithm);
  ~resultHex = HexEncode(~result);
  ~nextIndex = index + 1;
_=0];
  Case(
    roundNumber = ~nextIndex;
    ~result;

    roundNumber > index;
    PasswordHash_Round(roundNumber; ~nextIndex; digestAlgorithm; ~resultHex; convertedSaltHex; convertedPasswordHex);

    "?"
  )
)