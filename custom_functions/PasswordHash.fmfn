// PasswordHash(password; salt; rounds)
// Creates a password hash
//
// ver 0.1
// LastUpdate: 2019/12/05
// Compatible: FileMaker Pro 16 and later
//             not supported in runtime solutions
//
// Params:
//   password: [Text] 生のパスワード。8〜64文字、ASCII（不可視文字はスペースのみ）。
//   salt:     [Text] 基本的には空欄、デフォルト値推奨。
//                      空欄の場合16文字（96bit）の乱数を利用する。
//                      salt用の文字列。最大16文字。それを超える場合は17文字以降を削除する。
//                      非推奨だが互換性を保つ為 salt がない場合 `Char(26)` を指定することで、真の意味で空欄扱いになる。
//   rounds:   [Number] 基本的には空欄、デフォルト値推奨。
//                      空欄の場合は5,000回に設定される。
//                      ストレッチング回数。SetRecursionを使わずに利用する場合は 49,900 ぐらいが限度。
//
// Result: [Text] ハッシュ値 or エラー情報
//   正常時:
//     "$6f$/pFNGxeaFY7bSiX4$j8OaSP65.C7JPf3lYCqHUbXyTH9C2qSPfBuwlHzqojf8ZtvdPbUEczVesUBY4Htq4ppxhkKoLv09qKsszNwKmQ"
//   エラー時（ストレッチング回数が限界を超えているなど）:
//     "?"
//   エラー salt に利用できない文字が含まれている時:
//     "?:Character that cannot be used for salt"
//   エラー password に利用できない文字が含まれている時:
//     "?:Character that cannot be used for password"
//   エラー rounds に自然数以外が指定されている場合
//     "?:rounds is incorrect as a number"
//   エラー password が8文字未満の場合
//     "?:password is too short";
//   エラー password が64文字を超える場合
//     "?:Password too long";
//
// Example:
//   デフォルト値を利用して "Password" をハッシュ化:
//     PasswordHash("Password"; ""; "")
//   Salt を指定した例:
//     PasswordHash("Password"; "/pFNGxeaFY7bSiX4"; "")
//   5万回を超えるストレッチングを行う例（FileMaker 18以上必須）:
//     SetRecursion(PasswordHash("Password"; ""; 60000); 60100)
Case(
  // Validation
  not Exact(salt; Char(26)) and not Exact(AsciiFilter(salt); salt); "?:Character that cannot be used for Salt";
  not Exact(AsciiFilter(password); password); "?:Character that cannot be used for Password";
  Length(password) < 8 ; "?:Password is too short";
  Length(password) > 64 ; "?:Password too long";
  not Exact(Abs(Int(rounds)); rounds); "?:Rounds is incorrect as a number";

  Let([
    // Default values
    ~default_salt_length = 16;
    ~max_salt_length     = 16;
    ~default_rounds      = 5000;
    ~digestAlgorithm     = "SHA512";
    ~algorithmByteLength = 64;
    ~identifier          = "6f"; // MCF(Modular Crypt Format) identifier 6 = SHA256, F = FileMaker

    // 文字列複製用のドット Substitute で文字列のリピートを再現 (MAX 256)
    ~repeatBase = "...................................................................................................."
                & "...................................................................................................."
                & "........................................................";

    // Argument optimization
    ~salt = Case(
      Exact(salt; Char(26)); "";
      not IsEmpty(salt); Left(salt; 16);
      PasswordSaltGenerate(16)
    );
    ~roundNumber = GetAsNumber(rounds);
    ~roundNumber = Case(
      IsEmpty(~roundNumber); ~default_rounds;
      ~roundNumber < 1000; 1000;
      ~roundNumber > 999999999; 999999999;
      ~roundNumber
    );

    // Argument info
    ~passwordLength = Length(password);
    ~passwordHex = HexEncode(password);
    ~saltLength = Length(~salt);

    ~b = CryptDigest(password & ~salt & password; ~digestAlgorithm);
    ~bHex = HexEncode(~b);

    ~bRepeatHex = If(Int(~passwordLength / ~algorithmByteLength) = 1; ~bHex; "");
    ~bFrontHex = Left(~bHex; Mod(~passwordLength; ~algorithmByteLength) * 2);
    ~aStringHex = ~passwordHex & HexEncode(~salt) & ~bRepeatHex & ~bFrontHex;

    ~repeatBitList = List("pppb"; "bppb"; "pbpb"; "bbpb"; "ppbb"; "bpbb"; "pbbb"; "bbbb"; "ppppb"; "bpppb"; "pbppb"; "bbppb";
      "ppbpb"; "bpbpb"; "pbbpb"; "bbbpb"; "pppbb"; "bppbb"; "pbpbb"; "bbpbb"; "ppbbb"; "bpbbb"; "pbbbb"; "bbbbb"; "pppppb";
      "bppppb"; "pbpppb"; "bbpppb"; "ppbppb"; "bpbppb"; "pbbppb"; "bbbppb"; "pppbpb"; "bppbpb"; "pbpbpb"; "bbpbpb"; "ppbbpb";
      "bpbbpb"; "pbbbpb"; "bbbbpb"; "ppppbb"; "bpppbb"; "pbppbb"; "bbppbb"; "ppbpbb"; "bpbpbb"; "pbbpbb"; "bbbpbb"; "pppbbb";
      "bppbbb"; "pbpbbb"; "bbpbbb"; "ppbbbb"; "bpbbbb"; "pbbbbb"; "bbbbbb"; "ppppppb");
    ~aStringHex = ~aStringHex & Substitute(GetValue(~repeatBitList; ~passwordLength - 7); ["p"; ~passwordHex]; ["b"; ~bHex]);
    ~aString = HexDecode(~aStringHex; True);

    ~input = CryptDigest(~aString; ~digestAlgorithm);
    ~inputHex = HexEncode(~input);

    ~dp = CryptDigest(Substitute(Left(~repeatBase; ~passwordLength); "."; password); ~digestAlgorithm);
    ~dpHex = HexEncode(~dp);

    ~pHexFront = Substitute(Left(~repeatBase; Int(~passwordLength / ~algorithmByteLength)); "."; ~dpHex);
    ~pHexBack = Left(~dpHex; Mod(~passwordLength; ~algorithmByteLength) * 2);
    ~pHex = ~pHexFront & ~pHexBack;

    ~inputFirstByte = Let([
      ~firstByte = Left(~inputHex; 2);
      ~first = Left(~firstByte; 1);
      ~first = Substitute(~first; ["A"; 10]; ["A"; 10]; ["B"; 11]; ["C"; 12]; ["D"; 13]; ["E"; 14]; ["F"; 15]);
      ~last = Right(~firstByte; 1);
      ~last = Substitute(~last; ["A"; 10]; ["A"; 10]; ["B"; 11]; ["C"; 12]; ["D"; 13]; ["E"; 14]; ["F"; 15]);
    _=0];
      ~last + (~first * 16)
    );
    ~repeatedSalt = Substitute(Left(~repeatBase; (16 + ~inputFirstByte)); "."; ~salt);
    ~ds = CryptDigest(~repeatedSalt; ~digestAlgorithm);
    ~dsHex = HexEncode(CryptDigest(~repeatedSalt; ~digestAlgorithm));

    ~sHex = Substitute(Left(~repeatBase; Int(~saltLength / ~algorithmByteLength)); "."; ~dsHex)
            & Left(~dsHex; Mod(~saltLength; ~algorithmByteLength) * 2);
    ~s = HexDecode(~sHex; True);

    ~input = PasswordHash_Round(~roundNumber; 0; ~digestAlgorithm; ~inputHex; ~sHex; ~pHex);

    ~digest = Substitute(Base64EncodeRFC(4648; CryptDigest(~input; "SHA512")); ["+"; "."]; ["="; ""]);
    ~rounds = If(~roundNumber <> 5000; "$rounds=" & ~roundNumber);

    ~result = "$" & ~identifier & ~rounds & "$" & ~salt & "$" & ~digest;
  _=0];
    ~result
  )
)