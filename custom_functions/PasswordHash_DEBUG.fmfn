// PasswordHash_DEBUG(password; salt; rounds)
//
// === 通常使用禁止 ===
//
// PasswordHash の開発用関数
// 経過途中の変数をログとして出力することで、Rubyのプログラムと比較しやすくする為に作成
// 脆弱な値を出力しまくるので、通常開発用途以外での使用は行わない。
//
Case(
  // Validation
  not Exact(salt; Char(26)) and not Exact(AsciiFilter(salt); salt); "?:Character that cannot be used for Salt";
  not Exact(AsciiFilter(password); password); "?:Character that cannot be used for Password";
  Length(password) < 8 ; "?:Password is too short";
  Length(password) > 64 ; "?:Password too long";
  not Exact(Abs(Int(rounds)); rounds); "?:Rounds is incorrect as a number";

  Let([
~log = "";

    // Default values
    ~default_salt_length = 16;
    ~max_salt_length     = 16;
    ~default_rounds      = 5000;
    ~digestAlgorithm     = "SHA512";
    ~algorithmByteLength = 64;
    ~identifier          = "6f"; // MCF(Modular Crypt Format) identifier 6 = SHA256, F = FileMaker

    // 文字列複製用のドット Substitute で文字列のリピートを再現 (MAX 256)
    ~repeatBase = "...................................................................................................."
                & "...................................................................................................."
                & "........................................................";

    // Argument optimization
    ~salt = Case(
      Exact(salt; Char(26)); "";
      not IsEmpty(salt); Left(salt; 16);
      PasswordSaltGenerate(16)
    );
    ~roundNumber = GetAsNumber(rounds);
    ~roundNumber = Case(
      IsEmpty(~roundNumber); ~default_rounds;
      ~roundNumber < 1000; 1000;
      ~roundNumber > 999999999; 999999999;
      ~roundNumber
    );
~log = List(~log; "SET ~roundNumber: " & ~roundNumber);

    // Argument info
    ~passwordLength = Length(password);
    ~passwordHex = HexEncode(password);
    ~saltLength = Length(~salt);

    ~b = CryptDigest(password & ~salt & password; ~digestAlgorithm);
    ~bHex = HexEncode(~b);
~log = List(~log; "SET ~b (MD5):" & GetContainerAttribute(~b; "MD5"));

    ~bRepeatHex = If(Int(~passwordLength / ~algorithmByteLength) = 1; ~bHex; "");
    ~bFrontHex = Left(~bHex; Mod(~passwordLength; ~algorithmByteLength) * 2);
    ~aStringHex = ~passwordHex & HexEncode(~salt) & ~bRepeatHex & ~bFrontHex;
~log = List(~log; "SET ~aString (MD5):" & GetContainerAttribute(HexDecode(~aStringHex; True); "MD5"));

    ~repeatBitList = List("pppb"; "bppb"; "pbpb"; "bbpb"; "ppbb"; "bpbb"; "pbbb"; "bbbb"; "ppppb"; "bpppb"; "pbppb"; "bbppb";
      "ppbpb"; "bpbpb"; "pbbpb"; "bbbpb"; "pppbb"; "bppbb"; "pbpbb"; "bbpbb"; "ppbbb"; "bpbbb"; "pbbbb"; "bbbbb"; "pppppb";
      "bppppb"; "pbpppb"; "bbpppb"; "ppbppb"; "bpbppb"; "pbbppb"; "bbbppb"; "pppbpb"; "bppbpb"; "pbpbpb"; "bbpbpb"; "ppbbpb";
      "bpbbpb"; "pbbbpb"; "bbbbpb"; "ppppbb"; "bpppbb"; "pbppbb"; "bbppbb"; "ppbpbb"; "bpbpbb"; "pbbpbb"; "bbbpbb"; "pppbbb";
      "bppbbb"; "pbpbbb"; "bbpbbb"; "ppbbbb"; "bpbbbb"; "pbbbbb"; "bbbbbb"; "ppppppb");
    ~aStringHex = ~aStringHex & Substitute(GetValue(~repeatBitList; ~passwordLength - 7); ["p"; ~passwordHex]; ["b"; ~bHex]);
    ~aString = HexDecode(~aStringHex; True);
~log = List(~log; "SET ~aString (MD5):" & GetContainerAttribute(~aString; "MD5"));

    ~input = CryptDigest(~aString; ~digestAlgorithm);
    ~inputHex = HexEncode(~input);
~log = List(~log; "SET ~input (MD5):" & GetContainerAttribute(~input; "MD5"));

    ~dp = CryptDigest(Substitute(Left(~repeatBase; ~passwordLength); "."; password); ~digestAlgorithm);
    ~dpHex = HexEncode(~dp);
~log = List(~log; "SET ~dp (MD5):" & GetContainerAttribute(~dp; "MD5"));

    ~pHexFront = Substitute(Left(~repeatBase; Int(~passwordLength / ~algorithmByteLength)); "."; ~dpHex);
    ~pHexBack = Left(~dpHex; Mod(~passwordLength; ~algorithmByteLength) * 2);
    ~pHex = ~pHexFront & ~pHexBack;
~p = HexDecode(~pHex; True);
~log = List(~log; "SET ~p (MD5):" & GetContainerAttribute(~p; "MD5"));

    ~inputFirstByte = Let([
      ~firstByte = Left(~inputHex; 2);
      ~first = Left(~firstByte; 1);
      ~first = Substitute(~first; ["A"; 10]; ["A"; 10]; ["B"; 11]; ["C"; 12]; ["D"; 13]; ["E"; 14]; ["F"; 15]);
      ~last = Right(~firstByte; 1);
      ~last = Substitute(~last; ["A"; 10]; ["A"; 10]; ["B"; 11]; ["C"; 12]; ["D"; 13]; ["E"; 14]; ["F"; 15]);
    _=0];
      ~last + (~first * 16)
    );
    ~repeatedSalt = Substitute(Left(~repeatBase; (16 + ~inputFirstByte)); "."; ~salt);
    ~ds = CryptDigest(~repeatedSalt; ~digestAlgorithm);
    ~dsHex = HexEncode(CryptDigest(~repeatedSalt; ~digestAlgorithm));
~log = List(~log; "SET ~ds (MD5):" & GetContainerAttribute(~ds; "MD5"));

    ~sHex = Substitute(Left(~repeatBase; Int(~saltLength / ~algorithmByteLength)); "."; ~dsHex)
            & Left(~dsHex; Mod(~saltLength; ~algorithmByteLength) * 2);
    ~s = HexDecode(~sHex; True);
~log = List(~log; "SET ~s (MD5):" & GetContainerAttribute(~s; "MD5"));

    ~input = PasswordHash_Round(~roundNumber; 0; ~digestAlgorithm; ~inputHex; ~sHex; ~pHex);
~log = List(~log; "SET ~input (MD5):" & GetContainerAttribute(~input; "MD5"));

    ~digest = Substitute(Base64EncodeRFC(4648; CryptDigest(~input; "SHA512")); ["+"; "."]; ["="; ""]);
    ~rounds = If(~roundNumber <> 5000; "$rounds=" & ~roundNumber);

    ~result = "$" & ~identifier & ~rounds & "$" & ~salt & "$" & ~digest;
  _=0];
    List(~log; ~result)
  )
)